[{"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\index.js":"1","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\App.js":"2","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\webSocketClient.js":"3","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js":"4","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js":"5","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js":"6","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js":"7","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js":"8","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js":"9","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js":"10","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js":"11","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\api\\userApi.js":"12","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js":"13","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js":"14","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\history.js":"15","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\gameInfo.js":"16","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Home\\rankingBoard.js":"17","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js":"18"},{"size":267,"mtime":1608371276896,"results":"19","hashOfConfig":"20"},{"size":7445,"mtime":1610028651727,"results":"21","hashOfConfig":"20"},{"size":1375,"mtime":1610201893028,"results":"22","hashOfConfig":"20"},{"size":4749,"mtime":1609079594220,"results":"23","hashOfConfig":"20"},{"size":4526,"mtime":1608570359192,"results":"24","hashOfConfig":"20"},{"size":765,"mtime":1608381858775,"results":"25","hashOfConfig":"20"},{"size":602,"mtime":1609939502647,"results":"26","hashOfConfig":"20"},{"size":2009,"mtime":1608570359192,"results":"27","hashOfConfig":"20"},{"size":12192,"mtime":1610201893025,"results":"28","hashOfConfig":"20"},{"size":6688,"mtime":1610201893023,"results":"29","hashOfConfig":"20"},{"size":4658,"mtime":1610201893027,"results":"30","hashOfConfig":"20"},{"size":3282,"mtime":1610201893018,"results":"31","hashOfConfig":"20"},{"size":3165,"mtime":1609166263154,"results":"32","hashOfConfig":"20"},{"size":376,"mtime":1610028651732,"results":"33","hashOfConfig":"20"},{"size":1991,"mtime":1610201893020,"results":"34","hashOfConfig":"20"},{"size":1536,"mtime":1610201893019,"results":"35","hashOfConfig":"20"},{"size":1530,"mtime":1609939502650,"results":"36","hashOfConfig":"20"},{"size":1061,"mtime":1608371276891,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"mqitbs",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\index.js",[],["86","87"],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\App.js",[],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\webSocketClient.js",[],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js",["88","89"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Avatar, Button, CssBaseline, TextField, Typography, makeStyles, Container } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport './index.css';\r\nimport api from '../../api/userApi';\r\nimport facebookImg from '../../images/facebook.png';\r\nimport googleImg from '../../images/google.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function Login(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const handleChangeLoginStatus = props.handleChangeLoginStatus;\r\n\r\n    useEffect(() => {\r\n        if (token) { // TODO\r\n            history.push('/');\r\n        }\r\n    }, [])\r\n\r\n    const handleUsernameChange = (e) => {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n    const handlePasswordChange = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let response = await api.login(username, password);\r\n        if (response.message) {\r\n            if (response.message == 'Invalid') {\r\n                alert(\"Username or password is not correct. Please try again!\");\r\n            } else {\r\n                alert(\"Check out your email to validate this account!\");\r\n            }\r\n            history.push('/signin');\r\n        } else {\r\n            const data = response.data;\r\n            localStorage.setItem(\"token\", data.token);\r\n            localStorage.setItem(\"username\", data.user.username)\r\n            handleChangeLoginStatus();\r\n            alert('Successfully loged in. Welcome to Home!');\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form method=\"POST\" className={classes.form} onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"userName\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        onChange={handleUsernameChange}\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        onChange={handlePasswordChange}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <div className='link'>\r\n                        <button className='social-button' onClick={() => { window.location.href = 'http://localhost:3001/auth/fb' }}>\r\n                            <img src={facebookImg} className='facebook-login-image' alt='facebook-img'></img>\r\n                        </button>\r\n                        <button className='social-button' onClick={() => { window.location.href = 'http://localhost:3001/auth/google' }}>\r\n                            <img src={googleImg} className='google-login-image' alt='google-img'></img>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js",[],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container:{\r\n        height: '500px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    notification:{\r\n        fontSize: '2.5vw',\r\n        textAlign: 'center'\r\n    }\r\n}));\r\n\r\nexport default function CheckMail(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.notification}>\r\n                <b>Register completed!</b>\r\n                <br/>\r\n                One more step, check out your mail to finish the comfirmation!\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js",["92","93"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nexport default function Google(props) {\r\n    const history = useHistory();\r\n\r\n    const username = (new URL(document.location)).searchParams.get('user');\r\n    const token = (new URL(document.location)).searchParams.get('token');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"username\", username);\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"loginStatus\", true);\r\n        props.handleChangeLoginStatus();\r\n        history.push('/');\r\n    }, []);\r\n\r\n    return (null);\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js",["94","95"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        height: '500px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    notification: {\r\n        fontSize: '2.5vw',\r\n        textAlign: 'center'\r\n    },\r\n    loading: {\r\n        width: '1em',\r\n        height: '1em',\r\n        display: 'inline-block',\r\n        textAlign: 'left'\r\n    }\r\n}));\r\n\r\nlet createCallback=0;\r\nconst timeInterval=200;\r\n\r\nexport default function MailValidate(props) {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('...');\r\n    const history = useHistory();\r\n\r\n    // update loading\r\n    let current=new Date().getTime();\r\n    // create only 1 callback at a time\r\n    if (current-createCallback>=timeInterval){\r\n        createCallback=current;\r\n        setTimeout(() => {\r\n            if (loading.length < 3) {\r\n                setLoading(loading + '.');\r\n            } else {\r\n                setLoading('');\r\n            }\r\n        }, timeInterval);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        // get username from url\r\n        let username = (new URL(document.location)).searchParams.get('username');\r\n        // call api for validation\r\n        await api.validate(username);\r\n        // delete all local storages on App\r\n        localStorage.setItem(\"username\", \"\");\r\n        localStorage.setItem(\"loginStatus\", \"false\");\r\n        localStorage.setItem(\"token\", \"\");\r\n        setTimeout(() => history.push('/signin'), 5000);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.notification}>\r\n                <b>Almost done!</b>\r\n                <br />\r\n                Wait for a moment <div className={classes.loading}>{loading}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js",["96","97","98","99","100","101"],"import RankingBoard from './rankingBoard';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './index.css';\r\nimport ws from '../../webSocketClient';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\nimport {\r\n    Grid, Container, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    Card, CardActionArea, CardActions, CardContent, Typography, Paper, InputBase, IconButton\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    cardMedia: {\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n}));\r\n\r\nconst boardsList = boards => (\r\n    boards.map((board) => {\r\n        return (\r\n            <BoardItem key={board.boardId}\r\n                boardItem={board} />\r\n        );\r\n    })\r\n);\r\n\r\nconst usersList = users => (\r\n    users.map(user => {\r\n        return (\r\n            <UserItem key={user.username} user={user} />\r\n        );\r\n    })\r\n);\r\n\r\nexport default function Home() {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n    const [boards, setBoards] = useState([]);\r\n    const [searchedBoardIdText, setSearchedBoardIdText] = useState('');\r\n    const [rankingBoard, setRankingBoard] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // call API and get boards\r\n            let response = await api.getAllBoards();\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            // set boards list\r\n            setBoards(response);\r\n            // init web socket client\r\n            ws.createConnection(localStorage.getItem('username'), (topicName, msg) => {\r\n                let callbacks = {\r\n                    usersList: async () => {\r\n                        let arr = await api.getUsers();\r\n                        setUsers(arr);\r\n                    },\r\n                    boardsList: async () => {\r\n                        let arr = await api.getAllBoards();\r\n                        setBoards(arr);\r\n                    },\r\n                };\r\n                const topic = topicName.split('>>>')[0];\r\n                if (callbacks[topic]) {\r\n                    callbacks[topic]();\r\n                }\r\n            });\r\n            ws.subscribeTopic('boardsList');\r\n            ws.subscribeTopic('usersList');\r\n            // get users list\r\n            let arr = await api.getUsers();\r\n            setUsers(arr);\r\n            // get ranking board\r\n            const rankingBoard = await api.getRankingBoard();\r\n            setRankingBoard(rankingBoard);\r\n        })();\r\n    }, []);\r\n\r\n    const handleJoinGameById = async () => {\r\n        const boardId = searchedBoardIdText;\r\n        const boardResponse = await api.getBoard(boardId);\r\n        if (boardResponse._id) {\r\n            const username = localStorage.getItem(\"username\");\r\n            if (username == boardResponse.userId1) {\r\n                alert('You are already the owner of this game!');\r\n                history.push(`/board?id=${boardId}`);\r\n            } else {\r\n                if (!boardResponse.userId2) {\r\n                    await api.joinBoard(boardId);\r\n                    history.push(`/board?id=${boardId}`);\r\n                    alert(\"You have successfully joined the game as the second player. Play your best!\");\r\n                } else {\r\n                    history.push(`/board?id=${boardId}`);\r\n                    if (boardResponse.userId2 == username) {\r\n                        alert(\"You already joined this game as a player!\");\r\n                    } else {\r\n                        alert(\"This game is full. You have joined the game as a spectator. Enjoy the match!\");\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            alert(\"There is no game to match your search. Please try again!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"home-container\">\r\n                <div>\r\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12} sm={4} md={4}>\r\n                                <Paper variant=\"outlined\" style={{ display: 'flex' }}>\r\n                                    <InputBase\r\n                                        className={classes.input}\r\n                                        placeholder=\"Join game by id/key\"\r\n                                        inputProps={{ 'aria-label': 'join game by key' }}\r\n                                        onChange={(e) => {\r\n                                            setSearchedBoardIdText(e.target.value)\r\n                                        }}\r\n                                    />\r\n                                    <IconButton onClick={handleJoinGameById} className={classes.iconButton} aria-label=\"join\">\r\n                                        <ArrowForwardIcon />\r\n                                    </IconButton>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12} sm={4} md={4}>\r\n                                <AddBoardDialog callback={setBoards} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                        <Grid container spacing={4}>\r\n                            {boardsList(boards)}\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n                <div className=\"right-panel\">\r\n                    <div className='right-panel-container'>\r\n                        <div className='users-list'>\r\n                            {usersList(users)}\r\n                        </div>\r\n                        <RankingBoard rankingBoard={rankingBoard} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction BoardItem(props) {\r\n    const classes = useStyles();\r\n    const board = props.boardItem;\r\n    const history = useHistory();\r\n    let boardColor = (board.winner) ? '#ebebeb' : (board.userId2) ? \"#deffde\" : \"#ededff\";\r\n    let boardStatusText = (board.winner) ? \"Finished\" : (board.userId2) ? \"Playing\" : \"Waiting\";\r\n\r\n    async function viewGame() {\r\n        history.push(`/board?id=${board.boardId}`);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n                <CardActionArea style={{ flexGrow: 1, backgroundColor: boardColor }}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {board.boardId}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Owner: <b>{board.userId1}</b>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Other: <b>{board.userId2}</b>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Status: <b>{boardStatusText}</b>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {/* </Link> */}\r\n                <CardActions >\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={viewGame}>\r\n                        VIEW GAME\r\n                </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction UserItem(props) {\r\n    const user = props.user;\r\n    const history = useHistory();\r\n\r\n    let statusColor = (user.isActive ? \"#29ba29\" : \"#d9d9d9\");\r\n\r\n    return (\r\n        <div\r\n            className=\"user-item\"\r\n            onClick={() => {\r\n                history.push(`/detail?user=${user.username}`);\r\n            }}\r\n        >\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}><FiberManualRecordIcon style={{ color: statusColor }} /></div>\r\n            <div style={{ marginLeft: \"5px\", display: \"flex\", alignItems: \"center\" }}>{user.username}</div>\r\n            <div style={{ flexGrow: 1 }}></div>\r\n            <button\r\n                style={{\r\n                    width: \"4rem\",\r\n                    margin: \"5px\",\r\n                    ...(user.username == localStorage.getItem('username') ? { display: \"none\" } : {}),\r\n                    cursor: \"pointer\"\r\n                }}\r\n                disabled={!user.isActive}\r\n                onClick={e => {\r\n                    e.stopPropagation();\r\n                }}\r\n            >Invite</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddBoardDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameText, setNameText] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setNameText('');\r\n    };\r\n\r\n    const handleNameChange = (e) => {\r\n        setNameText(e.target.value);\r\n    };\r\n\r\n    async function createNewBoard(e) {\r\n        handleClose();\r\n        const response = await api.createBoard(nameText, nameText);\r\n        if (response != 'Success') {\r\n            alert(response);\r\n            return;\r\n        }\r\n        ws.notifyChange('boardsList');\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: 'absolute' }}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Create game\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Create game</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        To create a new game, please fill out board's name in the box.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={handleNameChange}\r\n                    />\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={createNewBoard}>\r\n                            Create\r\n                            </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js",["102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { useEffect, useState } from 'react';\r\nimport Square from './square';\r\nimport Chat from './chat';\r\nimport GameInfo from './gameInfo';\r\nimport GameHistory from './history';\r\nimport './index.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ws from '../../webSocketClient';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n}));\r\n\r\nconst boardSize = 20;\r\n\r\nconst renderSquare = (props) => {\r\n    return (\r\n        <Square\r\n            value={props.value}\r\n            onClick={props.onClick}\r\n            highlight={props.highlight}\r\n        />\r\n    );\r\n}\r\n\r\nexport default function Board(props) {\r\n    const [board, setBoard] = useState({});\r\n    const [chat, setChat] = useState([]);\r\n    const [isPlayer, setIsPlayer] = useState(false);\r\n    const [isEmptyRoom, setIsEmptyRoom] = useState(false);\r\n    const [stepNum, setStepNum] = useState();\r\n    const boardId = (new URL(document.location)).searchParams.get('id');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // get board\r\n            const board = await api.getBoard(boardId);\r\n            if (board.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            setBoard(board);\r\n            // init web socket client\r\n            ws.createConnection(localStorage.getItem('username'), (topicName, msg) => {\r\n                let callbacks = {\r\n                    chat: async function () {\r\n                        let newChat = await api.getBoardChat(boardId);\r\n                        setChat(newChat);\r\n                    },\r\n                    board: async function () {\r\n                        let board = await api.getBoard(boardId);\r\n                        setBoard(board);\r\n                    },\r\n                };\r\n                let arr = topicName.split('>>>')[0];\r\n                arr = arr.split('-');\r\n                let topic = arr[arr.length - 1];\r\n                if (callbacks[topic]) {\r\n                    if (topic == 'board' && msg != 'has new updates') {\r\n                        alert(msg);\r\n                    }\r\n                    callbacks[topic]();\r\n                } else {\r\n                    // players topic\r\n                    const activePlayers = topic[topic.length - 1];\r\n                    if (activePlayers != 2) {\r\n                        alert('Your opponent currently is not available!');\r\n                        setIsEmptyRoom(true);\r\n                    } else {\r\n                        alert('Another player is ready, are you ready?');\r\n                        setIsEmptyRoom(false);\r\n                    }\r\n                }\r\n            });\r\n            ws.subscribeTopic(`${board.boardId}-board`);\r\n            ws.subscribeTopic(`${board.boardId}-chat`);\r\n            // set isPlayer\r\n            let username = localStorage.getItem('username');\r\n            const isPlayer = (username == board.userId1 || username == board.userId2);\r\n            setIsPlayer(isPlayer);\r\n            if (isPlayer && !board.winner) {\r\n                ws.subscribeTopic(`${board.boardId}-players`);\r\n            }\r\n            // get chat\r\n            let chat = await api.getBoardChat(boardId);\r\n            setChat(chat);\r\n        })();\r\n    }, []);\r\n\r\n    async function takeTurn(row, col) {\r\n        // check if there is winner\r\n        if (board.winner) {\r\n            return;\r\n        }\r\n        if (!isPlayer) {\r\n            return;\r\n        }\r\n        if (isEmptyRoom) {\r\n            alert(\"Please wait until there is another player enter this room to play!\");\r\n            return;\r\n        }\r\n        // check if the cell is empty\r\n        if (board.history[board.history.length - 1].squares[boardSize * row + col]) {\r\n            return;\r\n        }\r\n        // check if this is your turn or not\r\n        if (board.nextTurn != localStorage.getItem('username')) {\r\n            return;\r\n        }\r\n        // make the turn at client while waiting for response from server\r\n        let boardCopy = JSON.parse(JSON.stringify(board));\r\n        let current = JSON.parse(JSON.stringify(board.history[board.history.length - 1]));\r\n        boardCopy.history.push(current);\r\n        current.squares[row * boardSize + col] = (board.userId1 == localStorage.getItem('username') ? 'X' : 'O');\r\n        setBoard(boardCopy);\r\n        await api.takeTurn(boardId, row, col);\r\n        ws.notifyChange(`${board.boardId}-board`);\r\n    }\r\n\r\n    function isWinnerCell(row, col) {\r\n        if (!board.winLine) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < board.winLine.length; i++) {\r\n            if (board.winLine[i].row == row && board.winLine[i].col == col) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function renderSquares() {\r\n        if (!board.boardId)\r\n            return;\r\n        let squares = (board.winner && stepNum >= 0) ? board.history[stepNum].squares : board.history[board.history.length - 1].squares;\r\n        let jsx = [];\r\n        for (let i = 0; i < boardSize; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < boardSize; j++) {\r\n                row.push(renderSquare({\r\n                    value: squares[i * boardSize + j],\r\n                    highlight: (stepNum == board.history.length - 1 || stepNum === undefined ? isWinnerCell(i, j) : false),\r\n                    onClick: () => takeTurn(i, j),\r\n                }));\r\n            }\r\n            jsx.push(<div key={i} className=\"board-row\">{row}</div>);\r\n        }\r\n        return jsx;\r\n    }\r\n\r\n    // scroll to the bottom of chat frame\r\n    setTimeout(() => {\r\n        let element = document.getElementById(\"listChat\");\r\n        element.scrollTop = element.scrollHeight;\r\n    }, 0);\r\n\r\n    return (\r\n        <div>\r\n            <div className='board-game'>\r\n                <div style={{ height: \"inherit\" }}>\r\n                    {/* for history */}\r\n                    <GameHistory board={board} setStepNum={setStepNum} stepNum={stepNum} />\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <GameInfo board={board} />\r\n                    </div>\r\n                    {renderSquares()}\r\n                </div>\r\n                <Chat\r\n                    boardId={boardId}\r\n                    participant1={board.userId1}\r\n                    participant2={board.userId2}\r\n                    isPlayer={isPlayer}\r\n                    chat={chat}\r\n                    topicName={`${board.boardId}-chat`}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js",["114","115","116"],"import './index.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Avatar, CssBaseline, Typography, Container, Grid, Card, CardActionArea, CardContent, CardActions, Button } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport api from '../../api/userApi';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst boardsList = boards => (\r\n    boards.map((board) => {\r\n        if (board.boardId && board.result) { //kiểm tra boardID rỗng và đã kết thúc\r\n            return (\r\n                <BoardItem key={board.boardId}\r\n                    boardItem={board} />\r\n            );\r\n        }\r\n    })\r\n);\r\n\r\nexport default function UserProfile() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [user, setUser] = useState({});\r\n    const [boards, setBoards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const username = (new URL(document.location)).searchParams.get('user');\r\n\r\n        (async () => {\r\n            let response = await api.getUserByUsername(username);\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            setUser(response);\r\n            setBoards(response.history);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <main>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Profile\r\n                    </Typography>\r\n                    <div className='profile-content'>\r\n                        <div>Username: <b>{user.username}</b></div><br />\r\n                        <div>Email: <b>{user.email}</b></div><br />\r\n                        <div>Games played: <b>{(user.win || 0) + (user.lose || 0)}</b></div><br />\r\n                        <div>Games won: <b>{user.win}</b></div><br />\r\n                        <div>Games lost: <b>{user.lose}</b></div><br />\r\n                        <div>Trophy: <b>{user.trophy}</b></div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Typography component=\"h1\" variant=\"h5\" style={{ marginBottom: 20, color: \"#aaaaaa\" }}>\r\n                    LIST GAMES PLAYED\r\n                </Typography>\r\n                <Grid container spacing={4}>\r\n                    {boardsList(boards)}\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction BoardItem(props) {\r\n    const classes = useStyles();\r\n    const board = props.boardItem;\r\n    const history = useHistory();\r\n    const result = board.result;\r\n    let boardColor = (result == \"lose\") ? \"rgb(255, 242, 242)\" : \"rgb(222, 255, 222)\";\r\n\r\n    async function viewGame() {\r\n        history.push(`/board?id=${board.boardId}`);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n                <CardActionArea style={{ flexGrow: 1, backgroundColor: boardColor }}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h4\">\r\n                            {board.boardId}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                            Result: <b>{result}</b>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions >\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={viewGame}>\r\n                        VIEW GAME\r\n                </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\api\\userApi.js",[],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js",["117","118","119","120","121"],"import React, { useEffect, useState } from 'react';\r\nimport api from '../../api/userApi';\r\nimport './index.css';\r\nimport ws from '../../webSocketClient';\r\n\r\nconst Chat = (props) => {\r\n    const [msg,setMsg]=useState(\"\");\r\n\r\n    function getListChat(){\r\n        let chat=props.chat;\r\n        let jsx=[];\r\n        let username=localStorage.getItem('username');\r\n        for (let i=0; i<chat.length; i++){\r\n            if (chat[i].from==username){\r\n                jsx.push(\r\n                    <div key={chat[i].time} className='message-tag-right'>\r\n                        <div></div>\r\n                        <div \r\n                            style={{\r\n                                backgroundColor: \"#99eeee\", \r\n                                borderRadius: \"5px\",\r\n                                margin: \"10px\",\r\n                                boxSizing: \"border-box\",\r\n                                textAlign: \"left\",\r\n                                padding: \"10px\"\r\n                            }}>\r\n                            {chat[i].content}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                jsx.push(\r\n                    <div key={chat[i].time} className='message-tag-left'>\r\n                        <div\r\n                            style={{\r\n                                backgroundColor: (chat[i].from==props.participant1 || chat[i].from==props.participant2 ? \"#c7ffba\" : \"#dddddd\"), \r\n                                borderRadius: \"5px\",\r\n                                margin: \"10px\",\r\n                                boxSizing: \"border-box\",\r\n                                textAlign: \"left\",\r\n                                padding: \"10px\"\r\n                            }}\r\n                        >\r\n                            <div style={{fontSize: \"0.75em\"}}>{chat[i].from}:</div>\r\n                            <div>{chat[i].content}</div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        return jsx;\r\n    }   \r\n    \r\n    let listChat=getListChat();\r\n\r\n    async function sendMessage(){\r\n        await api.makeMessage(props.boardId,new Date().getTime(),msg); \r\n        ws.notifyChange(props.topicName);\r\n        setMsg('');\r\n    }\r\n\r\n    return (\r\n        <div className='chat-frame'>\r\n            <div className=\"list-chat\" id='listChat'>\r\n                {listChat}\r\n            </div>\r\n            <div className='text-box'>\r\n                <input \r\n                    className='message-text-box' \r\n                    onChange={(e)=>{\r\n                        setMsg(e.target.value);\r\n                    }}\r\n                    onKeyPress={(e)=>{\r\n                        if ((e.code || e.key)=='Enter'){\r\n                            // ENTER is pressed\r\n                            sendMessage();\r\n                        }\r\n                    }}\r\n                    type='text'\r\n                    value={msg}\r\n                />\r\n                <button className='send-button' onClick={sendMessage}>SEND</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js",[],"C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\history.js",["122","123","124","125","126"],"import React from 'react';\r\nimport './index.css';\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction GameHistory(props) {\r\n    const handleClick = (num) => {\r\n        props.setStepNum(num);\r\n    }\r\n\r\n    function getListHistory() {\r\n        const board = props.board;\r\n        let historyList = board.history;\r\n        let jsx = [];\r\n        if (!historyList) {\r\n            return jsx;\r\n        }\r\n        for (let i = 0; i < historyList.length; i++) {\r\n            if (i == 0) {\r\n                jsx.push(\r\n                    <Button variant=\"outlined\" color={props.stepNum == i ? \"secondary\" : \"primary\"} onClick={() => handleClick(i)}\r\n                        style={{\r\n                            width: '70%',\r\n                            margin: \"5px\",\r\n                            fontWeight: props.stepNum == i ? \"bold\" : \"normal\",\r\n                        }}\r\n                        disabled={!board.winner} //disable khi game đấu chưa kết thúc\r\n                    >\r\n                        Start\r\n                    </Button>\r\n                )\r\n            } else {\r\n                jsx.push(\r\n                    <Button variant=\"outlined\" color={props.stepNum == i ? \"secondary\" : \"primary\"} onClick={() => handleClick(i)}\r\n                        style={{\r\n                            width: '70%',\r\n                            margin: \"5px\",\r\n                            fontWeight: props.stepNum == i ? \"bold\" : \"normal\",\r\n                        }}\r\n                        disabled={!board.winner} //disable khi game đấu chưa kết thúc\r\n                    >\r\n                        {i}\r\n                    </Button>\r\n                )\r\n            }\r\n        }\r\n\r\n        return jsx;\r\n    }\r\n\r\n    const listHistory = getListHistory();\r\n\r\n    return (\r\n        <div className=\"history-frame\">\r\n            <div className=\"list-history\">\r\n                {listHistory}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameHistory;","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Board\\gameInfo.js",["127","128","129","130","131"],"import React from 'react';\r\nimport ws from '../../webSocketClient';\r\nimport { Button } from '@material-ui/core';\r\nimport api from '../../api/userApi';\r\n\r\nconst GameInfo = (props) => {\r\n    const username = localStorage.getItem(\"username\");\r\n    const boardId = props.board.boardId;\r\n    const isPlayer = (username == props.board.userId1 || username == props.board.userId2);\r\n    const winnerText = (props.board.winner ? props.board.winner : \"not yet\");\r\n    const nextTurnChar = (props.board.nextTurn == props.board.userId1 ? 'X' : 'O');\r\n    const nextTurnText = (isPlayer ? (username == props.board.nextTurn ? `you (${nextTurnChar})` : `opponent (${nextTurnChar})`) : `${props.board.nextTurn} (${nextTurnChar})`);\r\n\r\n    const handleSurrender = async () => {\r\n        const res = await api.surrender(boardId);\r\n        ws.notifyChange(`${props.board.boardId}-board`,`${username} surrendered!`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-info-frame\">\r\n            <div>Winner: {winnerText}</div>\r\n            <div>Next turn: {props.board.winner ? '---' : nextTurnText}</div>\r\n            <Button variant=\"outlined\" color=\"primary\" style={{ margin: \"5px 5px\" }} disabled={!isPlayer || !!props.board.winner}>\r\n                Draw request\r\n            </Button>\r\n            <Button onClick={handleSurrender} variant=\"outlined\" color=\"secondary\" style={{ margin: \"5px 5px\" }} disabled={!isPlayer || !!props.board.winner}>\r\n                Surrender\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInfo;","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\components\\Home\\rankingBoard.js",["132","133"],"import React, { useEffect, useState } from 'react';\r\nimport './index.css';\r\n\r\nfunction getRow(index, item) {\r\n    return (\r\n        <div key={item._id} style={{ display: 'flex' }}>\r\n            <div style={{ width: '2em', textAlign: 'left', borderRight: '1px solid #dddddd', paddingTop: '10px' }}>\r\n                {`${index + 1}`}\r\n            </div>\r\n            <div style={{ paddingLeft: '5px', paddingTop: '10px' }}>\r\n                <b>{item.username}</b>\r\n            </div>\r\n            <div style={{ flexGrow: 1, borderRight: '1px solid #dddddd' }}></div>\r\n            <div style={{ width: '2em', paddingTop: '10px' }}>\r\n                {`${item.trophy || 0}`}\r\n            </div>\r\n            <div style={{ paddingTop: '10px' }}>\r\n                🏆\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function RankingBoard(props) {\r\n    function getList() {\r\n        const list = props.rankingBoard;\r\n        if (!list.length)\r\n            return;\r\n        const arr = [(\r\n            <div key={-1}\r\n                style={{\r\n                    textAlign: 'center',\r\n                    fontWeight: 'bold',\r\n                    fontSize: '1.2em',\r\n                    borderBottom: '1px solid #dddddd'\r\n                }}\r\n            >TOP 10 PLAYERS</div>\r\n        )];\r\n        list.forEach((item, index) => {\r\n            arr.push(getRow(index, item));\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    return (\r\n        <div className='ranking-board'>\r\n            {getList()}\r\n        </div>\r\n    );\r\n}","C:\\Users\\Bin\\Desktop\\Workspace\\WebNangCao\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":43,"column":8,"nodeType":"140","endLine":43,"endColumn":10,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":58,"column":34,"nodeType":"144","messageId":"145","endLine":58,"endColumn":36},{"ruleId":"146","severity":1,"message":"147","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":25},{"ruleId":"146","severity":1,"message":"150","line":1,"column":27,"nodeType":"148","messageId":"149","endLine":1,"endColumn":36},{"ruleId":"146","severity":1,"message":"151","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"152","line":16,"column":8,"nodeType":"140","endLine":16,"endColumn":10,"suggestions":"153"},{"ruleId":"138","severity":1,"message":"154","line":47,"column":15,"nodeType":"155","endLine":57,"endColumn":6},{"ruleId":"138","severity":1,"message":"156","line":57,"column":8,"nodeType":"140","endLine":57,"endColumn":10,"suggestions":"157"},{"ruleId":"146","severity":1,"message":"158","line":7,"column":22,"nodeType":"148","messageId":"149","endLine":7,"endColumn":26},{"ruleId":"138","severity":1,"message":"156","line":121,"column":8,"nodeType":"140","endLine":121,"endColumn":10,"suggestions":"159"},{"ruleId":"142","severity":1,"message":"143","line":128,"column":26,"nodeType":"144","messageId":"145","endLine":128,"endColumn":28},{"ruleId":"142","severity":1,"message":"143","line":138,"column":47,"nodeType":"144","messageId":"145","endLine":138,"endColumn":49},{"ruleId":"142","severity":1,"message":"143","line":258,"column":39,"nodeType":"144","messageId":"145","endLine":258,"endColumn":41},{"ruleId":"142","severity":1,"message":"160","line":290,"column":22,"nodeType":"144","messageId":"145","endLine":290,"endColumn":24},{"ruleId":"146","severity":1,"message":"161","line":12,"column":7,"nodeType":"148","messageId":"149","endLine":12,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":61,"column":31,"nodeType":"144","messageId":"145","endLine":61,"endColumn":33},{"ruleId":"142","severity":1,"message":"160","line":61,"column":49,"nodeType":"144","messageId":"145","endLine":61,"endColumn":51},{"ruleId":"142","severity":1,"message":"160","line":68,"column":39,"nodeType":"144","messageId":"145","endLine":68,"endColumn":41},{"ruleId":"142","severity":1,"message":"143","line":81,"column":40,"nodeType":"144","messageId":"145","endLine":81,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":81,"column":69,"nodeType":"144","messageId":"145","endLine":81,"endColumn":71},{"ruleId":"138","severity":1,"message":"162","line":90,"column":8,"nodeType":"140","endLine":90,"endColumn":10,"suggestions":"163"},{"ruleId":"142","severity":1,"message":"160","line":109,"column":28,"nodeType":"144","messageId":"145","endLine":109,"endColumn":30},{"ruleId":"142","severity":1,"message":"143","line":116,"column":65,"nodeType":"144","messageId":"145","endLine":116,"endColumn":67},{"ruleId":"142","severity":1,"message":"143","line":127,"column":38,"nodeType":"144","messageId":"145","endLine":127,"endColumn":40},{"ruleId":"142","severity":1,"message":"143","line":127,"column":69,"nodeType":"144","messageId":"145","endLine":127,"endColumn":71},{"ruleId":"142","severity":1,"message":"143","line":144,"column":41,"nodeType":"144","messageId":"145","endLine":144,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":35,"column":24,"nodeType":"155","messageId":"166","endLine":35,"endColumn":26},{"ruleId":"138","severity":1,"message":"156","line":63,"column":8,"nodeType":"140","endLine":63,"endColumn":10,"suggestions":"167"},{"ruleId":"142","severity":1,"message":"143","line":103,"column":30,"nodeType":"144","messageId":"145","endLine":103,"endColumn":32},{"ruleId":"146","severity":1,"message":"150","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":14,"column":29,"nodeType":"144","messageId":"145","endLine":14,"endColumn":31},{"ruleId":"142","severity":1,"message":"143","line":36,"column":63,"nodeType":"144","messageId":"145","endLine":36,"endColumn":65},{"ruleId":"142","severity":1,"message":"143","line":36,"column":99,"nodeType":"144","messageId":"145","endLine":36,"endColumn":101},{"ruleId":"142","severity":1,"message":"143","line":74,"column":46,"nodeType":"144","messageId":"145","endLine":74,"endColumn":48},{"ruleId":"142","severity":1,"message":"143","line":18,"column":19,"nodeType":"144","messageId":"145","endLine":18,"endColumn":21},{"ruleId":"142","severity":1,"message":"143","line":20,"column":69,"nodeType":"144","messageId":"145","endLine":20,"endColumn":71},{"ruleId":"142","severity":1,"message":"143","line":24,"column":55,"nodeType":"144","messageId":"145","endLine":24,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":33,"column":69,"nodeType":"144","messageId":"145","endLine":33,"endColumn":71},{"ruleId":"142","severity":1,"message":"143","line":37,"column":55,"nodeType":"144","messageId":"145","endLine":37,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":9,"column":32,"nodeType":"144","messageId":"145","endLine":9,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":9,"column":67,"nodeType":"144","messageId":"145","endLine":9,"endColumn":69},{"ruleId":"142","severity":1,"message":"143","line":11,"column":48,"nodeType":"144","messageId":"145","endLine":11,"endColumn":50},{"ruleId":"142","severity":1,"message":"143","line":12,"column":48,"nodeType":"144","messageId":"145","endLine":12,"endColumn":50},{"ruleId":"146","severity":1,"message":"168","line":15,"column":15,"nodeType":"148","messageId":"149","endLine":15,"endColumn":18},{"ruleId":"146","severity":1,"message":"150","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"147","line":1,"column":28,"nodeType":"148","messageId":"149","endLine":1,"endColumn":36},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["171"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'React' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'props', 'token', and 'username'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["172"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["173"],"'Link' is defined but never used.",["174"],"Expected '!==' and instead saw '!='.","'useStyles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardId' and 'history'. Either include them or remove the dependency array.",["175"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["176"],"'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"181","fix":"183"},{"desc":"184","fix":"185"},{"desc":"181","fix":"186"},"Update the dependencies array to be: [history, token]",{"range":"187","text":"188"},"Update the dependencies array to be: [history, props, token, username]",{"range":"189","text":"190"},"Update the dependencies array to be: [history]",{"range":"191","text":"192"},{"range":"193","text":"192"},"Update the dependencies array to be: [boardId, history]",{"range":"194","text":"195"},{"range":"196","text":"192"},[1365,1367],"[history, token]",[573,575],"[history, props, token, username]",[1700,1702],"[history]",[3757,3759],[3358,3360],"[boardId, history]",[1920,1922]]