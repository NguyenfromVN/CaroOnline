[{"D:\\CaroOnline\\src\\front-end\\src\\index.js":"1","D:\\CaroOnline\\src\\front-end\\src\\App.js":"2","D:\\CaroOnline\\src\\front-end\\src\\components\\demoRealtime.js":"3","D:\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js":"4","D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js":"5","D:\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js":"6","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js":"7","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js":"8","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js":"9","D:\\CaroOnline\\src\\front-end\\src\\api\\userApi.js":"10","D:\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js":"11","D:\\CaroOnline\\src\\front-end\\src\\webSocketClient.js":"12","D:\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js":"13","D:\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js":"14","D:\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js":"15","D:\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js":"16"},{"size":256,"mtime":1608290034436,"results":"17","hashOfConfig":"18"},{"size":7435,"mtime":1609335048573,"results":"19","hashOfConfig":"18"},{"size":2850,"mtime":1607523969386,"results":"20","hashOfConfig":"18"},{"size":4749,"mtime":1609159578986,"results":"21","hashOfConfig":"18"},{"size":10736,"mtime":1609335093679,"results":"22","hashOfConfig":"18"},{"size":4526,"mtime":1608394987040,"results":"23","hashOfConfig":"18"},{"size":4990,"mtime":1609480306780,"results":"24","hashOfConfig":"18"},{"size":302,"mtime":1608282954454,"results":"25","hashOfConfig":"18"},{"size":3078,"mtime":1609164745078,"results":"26","hashOfConfig":"18"},{"size":2918,"mtime":1609481957260,"results":"27","hashOfConfig":"18"},{"size":1023,"mtime":1608282954373,"results":"28","hashOfConfig":"18"},{"size":1285,"mtime":1608297276036,"results":"29","hashOfConfig":"18"},{"size":765,"mtime":1608374402715,"results":"30","hashOfConfig":"18"},{"size":2009,"mtime":1608450297084,"results":"31","hashOfConfig":"18"},{"size":5283,"mtime":1609340798529,"results":"32","hashOfConfig":"18"},{"size":555,"mtime":1609335048574,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"112nzf5",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"36"},"D:\\CaroOnline\\src\\front-end\\src\\index.js",[],["77","78"],"D:\\CaroOnline\\src\\front-end\\src\\App.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\demoRealtime.js",["79","80"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// WEBSOCKET CLIENT SIDE\r\nconst ws = (() => {\r\n    // private\r\n    // singleton instance\r\n    let ws = undefined;\r\n    let lazyUpdate = {};\r\n\r\n    // public\r\n    function createConnection(userId, callback) {\r\n        destroyConnection();\r\n        ws = new WebSocket(\"ws://localhost:3001?userId=\" + userId);\r\n        ws.addEventListener(\"message\", ({ data: message }) => {\r\n            let topicName = message.split(\">>>\")[0];\r\n            if (lazyUpdate[topicName] > 0)\r\n                lazyUpdate[topicName] -= 1;\r\n            else\r\n                callback();\r\n        });\r\n    }\r\n\r\n    function destroyConnection() {\r\n        if (ws)\r\n            ws.close();\r\n        ws = undefined;\r\n    }\r\n\r\n    function notifyChange(topicName) {\r\n        ws.send(`${topicName}>>>changed`);\r\n        lazyUpdate[topicName] = (lazyUpdate[topicName] | 0) + 1;\r\n    }\r\n\r\n    return {\r\n        createConnection,\r\n        destroyConnection,\r\n        notifyChange\r\n    }\r\n})();\r\n\r\n// API\r\nasync function getActiveUsers() {\r\n    let response = await fetch('http://localhost:3001/active-users');\r\n    response = await response.json();\r\n    return response;\r\n}\r\n\r\n// HELPERS\r\nfunction refreshConnection(e, userId, setActiveUsers) {\r\n    if (e.charCode != 13)\r\n        return;\r\n    // when user press enter\r\n    // renew connection with new userId\r\n    ws.createConnection(userId,async ()=>{\r\n        // load list of active users\r\n        let activeUsers = await getActiveUsers();\r\n        setActiveUsers(activeUsers);\r\n    });\r\n}\r\n\r\nexport default function DemoRealtime(props) {\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const [userId, setUserId] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n         \r\n        // if the user is not authorized, redirect to login page\r\n        if (!token) { // TODO\r\n            history.push('/signin');\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            // load list of active users\r\n            let activeUsers = await getActiveUsers();\r\n            setActiveUsers(activeUsers);\r\n        })();\r\n    }, []);\r\n\r\n    let listItems=[];\r\n    for (let userId in activeUsers) {\r\n        listItems.push(\r\n            <li key={userId}>\r\n                {userId}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>User id:</p>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setUserId(e.target.value)}\r\n                onKeyPress={e => refreshConnection(e, userId, setActiveUsers)}\r\n            ></input>\r\n            <hr/>\r\n            <p>Active users:</p>\r\n            <ul>\r\n                {listItems}\r\n            </ul>\r\n        </div>\r\n    );\r\n}",["81","82"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js",["83","84"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Avatar, Button, CssBaseline, TextField, Typography, makeStyles, Container } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport './index.css';\r\nimport api from '../../api/userApi';\r\nimport facebookImg from '../../images/facebook.png';\r\nimport googleImg from '../../images/google.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function Login(props) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    const handleChangeLoginStatus = props.handleChangeLoginStatus;\r\n\r\n    useEffect(() => {\r\n        if (token) { // TODO\r\n            history.push('/');\r\n        }\r\n    }, [])\r\n\r\n    const handleUsernameChange = (e) => {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n    const handlePasswordChange = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let response = await api.login(username, password);\r\n        if (response.message) {\r\n            if (response.message == 'Invalid') {\r\n                alert(\"Username or password is not correct. Please try again!\");\r\n            } else {\r\n                alert(\"Check out your email to validate this account!\");\r\n            }\r\n            history.push('/signin');\r\n        } else {\r\n            const data = response.data;\r\n            localStorage.setItem(\"token\", data.token);\r\n            localStorage.setItem(\"username\", data.user.username)\r\n            handleChangeLoginStatus();\r\n            alert('Successfully loged in. Welcome to Home!');\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form method=\"POST\" className={classes.form} onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"userName\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        onChange={handleUsernameChange}\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        onChange={handlePasswordChange}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <div className='link'>\r\n                        <button className='social-button' onClick={() => { window.location.href = 'http://localhost:3001/auth/fb' }}>\r\n                            <img src={facebookImg} className='facebook-login-image' alt='facebook-img'></img>\r\n                        </button>\r\n                        <button className='social-button' onClick={() => { window.location.href = 'http://localhost:3001/auth/google' }}>\r\n                            <img src={googleImg} className='google-login-image' alt='google-img'></img>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js",["85","86","87","88"],"import React, { useEffect, useState } from 'react';\r\nimport './index.css';\r\nimport ws from '../../webSocketClient';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\nimport {\r\n    Grid, Container, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    Card, CardActionArea, CardActions, CardContent, Typography, Paper, InputBase, IconButton\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardMedia: {\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n}));\r\n\r\nconst boardsList = boards => (\r\n    boards.map((board) => {\r\n        return (\r\n            <BoardItem key={board.boardId}\r\n                boardItem={board} />\r\n        );\r\n    })\r\n);\r\n\r\nconst usersList = users => (\r\n    users.map(user => {\r\n        return (\r\n            <UserItem key={user.username} user={user} />\r\n        );\r\n    })\r\n);\r\n\r\nexport default function Home() {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n    const [boards, setBoards] = useState([]);\r\n    const [searchedBoardIdText, setSearchedBoardIdText] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // call API and get boards\r\n            let response = await api.getAllBoards();\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            // set boards list\r\n            setBoards(response);\r\n            // init web socket client\r\n            ws.createConnection(localStorage.getItem('username'), (topicName) => {\r\n                let callbacks = {\r\n                    general: function () {\r\n                        let needToRefresh = topicName.split('-')[1];\r\n                        switch (needToRefresh) {\r\n                            case \"users\": {\r\n                                (async () => {\r\n                                    let arr = await api.getUsers();\r\n                                    setUsers(arr);\r\n                                })();\r\n                                break;\r\n                            }\r\n                            case \"boards\": {\r\n                                (async () => {\r\n                                    let arr = await api.getAllBoards();\r\n                                    setBoards(arr);\r\n                                })();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                let arr = topicName.split('>>>')[0];\r\n                arr = arr.split('-');\r\n                let topic = arr[0];\r\n                if (callbacks[topic]) {\r\n                    callbacks[topic]();\r\n                }\r\n            });\r\n        })();\r\n    }, []);\r\n\r\n    const handleJoinGameById = async () => {\r\n        if (await api.getBoard(searchedBoardIdText)) {\r\n            history.push(`/board?id=${searchedBoardIdText}`)\r\n            window.alert('Join game successfully!');\r\n        } else {\r\n            window.alert('Failed');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"home-container\">\r\n                <div>\r\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12} sm={4} md={4}>\r\n                                <Paper variant=\"outlined\" style={{display: 'flex'}}>\r\n                                    <InputBase\r\n                                        className={classes.input}\r\n                                        placeholder=\"Join game by id/key\"\r\n                                        inputProps={{ 'aria-label': 'join game by key' }}\r\n                                        onChange={(e) => {\r\n                                            setSearchedBoardIdText(e.target.value)\r\n                                        }}\r\n                                    />\r\n                                    <IconButton onClick={handleJoinGameById} className={classes.iconButton} aria-label=\"join\">\r\n                                        <ArrowForwardIcon />\r\n                                    </IconButton>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12} sm={4} md={4}>\r\n                                <AddBoardDialog callback={setBoards} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                        <Grid container spacing={4}>\r\n                            {boardsList(boards)}\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n                <div className=\"users-list\">\r\n                    {usersList(users)}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction BoardItem(props) {\r\n    const classes = useStyles();\r\n    const board = props.boardItem;\r\n    const history = useHistory();\r\n\r\n    async function viewGame() {\r\n        history.push(`/board?id=${board.boardId}`);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n                <CardActionArea style={{flexGrow: 1}}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {board.name}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {board.boardId}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {board.userId1}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {board.userId2}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {/* </Link> */}\r\n                <CardActions >\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={viewGame}>\r\n                        VIEW GAME\r\n                </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction UserItem(props) {\r\n    const user = props.user;\r\n    const history = useHistory();\r\n\r\n    let statusColor = (user.isActive ? \"#00ff00\" : \"#aaaaaa\");\r\n\r\n    return (\r\n        <div\r\n            className=\"user-item\"\r\n            onClick={() => {\r\n                history.push(`/detail?user=${user.username}`);\r\n            }}\r\n        >\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}><FiberManualRecordIcon style={{ color: statusColor }} /></div>\r\n            <div style={{ marginLeft: \"5px\", display: \"flex\", alignItems: \"center\" }}>{user.username}</div>\r\n            <div style={{ flexGrow: 1 }}></div>\r\n            <button\r\n                style={{\r\n                    width: \"4rem\",\r\n                    margin: \"5px\",\r\n                    ...(user.username == localStorage.getItem('username') ? { display: \"none\" } : {}),\r\n                    cursor: \"pointer\"\r\n                }}\r\n                disabled={!user.isActive}\r\n                onClick={e => {\r\n                    e.stopPropagation();\r\n                }}\r\n            >Invite</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddBoardDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameText, setNameText] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setNameText('');\r\n    };\r\n\r\n    const handleNameChange = (e) => {\r\n        setNameText(e.target.value);\r\n    };\r\n\r\n    async function createNewBoard(e) {\r\n        handleClose();\r\n        await api.createBoard(nameText, nameText);\r\n        ws.notifyChange('boards');\r\n    }\r\n\r\n    return (\r\n        <div style={{position: 'absolute'}}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Create game\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Create game</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        To create a new game, please fill out board's name in the box.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={handleNameChange}\r\n                    />\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={createNewBoard}>\r\n                            Create\r\n                            </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js",["89","90","91","92","93","94"],"import React, { useEffect, useState } from 'react';\r\nimport Square from './square';\r\nimport Chat from './chat';\r\nimport './index.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ws from '../../webSocketClient';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n}));\r\n\r\nconst boardSize = 20;\r\n\r\nconst renderSquare = (props) => {\r\n    // const winLine = props.winLine;\r\n    return (\r\n        <Square\r\n            value={props.value}\r\n            onClick={props.onClick}\r\n        // highlight={(winLine && winLine.includes(i))}\r\n        />\r\n    );\r\n}\r\n\r\nexport default function Board(props) {\r\n    const [board, setBoard] = useState({});\r\n    const [chat, setChat] = useState([]);\r\n    const [isPlayer, setIsPlayer] = useState(false);\r\n    const boardId = (new URL(document.location)).searchParams.get('id');\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // get board\r\n            const board = await api.getBoard(boardId);\r\n            if (board.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            setBoard(board);\r\n            // set isPlayer\r\n            let username = localStorage.getItem('username');\r\n            setIsPlayer(username == board.userId1 || username == board.userId2);\r\n            // get chat\r\n            let chat = await api.getBoardChat(boardId);\r\n            setChat(chat);\r\n            // init web socket client\r\n            ws.createConnection(localStorage.getItem('username'), (topicName) => {\r\n                let callbacks = {\r\n                    chat: async function () {\r\n                        let newChat = await api.getBoardChat(boardId);\r\n                        setChat(newChat);\r\n                    },\r\n                    board: async function () {\r\n                        let board = await api.getBoard(boardId);\r\n                        setBoard(board);\r\n                    },\r\n                    general: function () {\r\n                        // TODO\r\n                    }\r\n                };\r\n                let arr = topicName.split('>>>')[0];\r\n                arr = arr.split('-');\r\n                let topic = arr[arr.length - 1];\r\n                if (callbacks[topic]) {\r\n                    callbacks[topic]();\r\n                }\r\n            });\r\n            let topic = `${board.userId1}-${board.userId2}`;\r\n            ws.subscribeTopic(`${topic}-board`);\r\n            ws.subscribeTopic(`${topic}-chat`);\r\n        })();\r\n    }, []);\r\n\r\n    async function takeTurn(row, col) {\r\n        if (!isPlayer) {\r\n            return;\r\n        }\r\n        // check if the cell is empty\r\n        if (board.history[board.history.length - 1].squares[boardSize * row + col]) {\r\n            return;\r\n        }\r\n        // check if this is your turn or not\r\n        if (board.nextTurn != localStorage.getItem('username')) {\r\n            return;\r\n        }\r\n        // make the turn at client while waiting for response from server\r\n        let boardCopy = JSON.parse(JSON.stringify(board));\r\n        let current = JSON.parse(JSON.stringify(board.history[board.history.length - 1]));\r\n        boardCopy.history.push(current);\r\n        current.squares[row * boardSize + col] = (board.userId1 == localStorage.getItem('username') ? 'X' : 'O');\r\n        setBoard(boardCopy);\r\n        await api.takeTurn(boardId, row, col);\r\n        ws.notifyChange(`${board.userId1}-${board.userId2}-board`);\r\n    }\r\n\r\n    function renderSquares() {\r\n        if (!board.boardId)\r\n            return;\r\n        let squares = board.history[board.history.length - 1].squares;\r\n        let jsx = [];\r\n        for (let i = 0; i < boardSize; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < boardSize; j++) {\r\n                row.push(renderSquare({\r\n                    value: squares[i * boardSize + j],\r\n                    onClick: () => takeTurn(i, j)\r\n                }));\r\n            }\r\n            jsx.push(<div key={i} className=\"board-row\">{row}</div>);\r\n        }\r\n        return jsx;\r\n    }\r\n\r\n    // scroll to the bottom of chat frame\r\n    setTimeout(() => {\r\n        let element = document.getElementById(\"listChat\");\r\n        element.scrollTop = element.scrollHeight;\r\n    }, 0);\r\n\r\n    return (\r\n        <div>\r\n            <div className='board-game'>\r\n                <div>\r\n                    {/* for history */}\r\n                </div>\r\n                <div >\r\n                    {renderSquares()}\r\n                </div>\r\n                <Chat\r\n                    boardId={boardId}\r\n                    participant1={board.userId1}\r\n                    participant2={board.userId2}\r\n                    isPlayer={isPlayer}\r\n                    chat={chat}\r\n                    topicName={`${board.userId1}-${board.userId2}-chat`}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js",["95","96","97","98","99"],"import React, { useEffect, useState } from 'react';\nimport api from '../../api/userApi';\nimport './index.css';\nimport ws from '../../webSocketClient';\n\nconst Chat = (props) => {\n    const [msg,setMsg]=useState(\"\");\n\n    function getListChat(){\n        let chat=props.chat;\n        let jsx=[];\n        let username=localStorage.getItem('username');\n        for (let i=0; i<chat.length; i++){\n            if (chat[i].from==username){\n                jsx.push(\n                    <div key={chat[i].time} className='message-tag-right'>\n                        <div></div>\n                        <div \n                            style={{\n                                backgroundColor: \"#99eeee\", \n                                borderRadius: \"5px\",\n                                margin: \"10px\",\n                                boxSizing: \"border-box\",\n                                textAlign: \"left\",\n                                padding: \"10px\"\n                            }}>\n                            {chat[i].content}\n                        </div>\n                    </div>\n                );\n            } else {\n                jsx.push(\n                    <div key={chat[i].time} className='message-tag-left'>\n                        <div\n                            style={{\n                                backgroundColor: (chat[i].from==props.participant1 || chat[i].from==props.participant2 ? \"#c7ffba\" : \"#dddddd\"), \n                                borderRadius: \"5px\",\n                                margin: \"10px\",\n                                boxSizing: \"border-box\",\n                                textAlign: \"left\",\n                                padding: \"10px\"\n                            }}\n                        >\n                            <div style={{fontSize: \"0.75em\"}}>{chat[i].from}:</div>\n                            <div>{chat[i].content}</div>\n                        </div>\n                    </div>\n                );\n            }\n        }\n        return jsx;\n    }   \n    \n    let listChat=getListChat();\n\n    async function sendMessage(){\n        await api.makeMessage(props.boardId,new Date().getTime(),msg); \n        ws.notifyChange(props.topicName);\n        setMsg('');\n    }\n\n    return (\n        <div className='chat-frame'>\n            <div className=\"list-chat\" id='listChat'>\n                {listChat}\n            </div>\n            <div className='text-box'>\n                <input \n                    className='message-text-box' \n                    onChange={(e)=>{\n                        setMsg(e.target.value);\n                    }}\n                    onKeyPress={(e)=>{\n                        if ((e.code || e.key)=='Enter'){\n                            // ENTER is pressed\n                            sendMessage();\n                        }\n                    }}\n                    type='text'\n                    value={msg}\n                />\n                <button className='send-button' onClick={sendMessage}>SEND</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;","D:\\CaroOnline\\src\\front-end\\src\\api\\userApi.js",[],"D:\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js",[],"D:\\CaroOnline\\src\\front-end\\src\\webSocketClient.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js",["100","101"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container:{\r\n        height: '500px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    notification:{\r\n        fontSize: '2.5vw',\r\n        textAlign: 'center'\r\n    }\r\n}));\r\n\r\nexport default function CheckMail(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.notification}>\r\n                <b>Register completed!</b>\r\n                <br/>\r\n                One more step, check out your mail to finish the comfirmation!\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js",["102","103"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        height: '500px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    notification: {\r\n        fontSize: '2.5vw',\r\n        textAlign: 'center'\r\n    },\r\n    loading: {\r\n        width: '1em',\r\n        height: '1em',\r\n        display: 'inline-block',\r\n        textAlign: 'left'\r\n    }\r\n}));\r\n\r\nlet createCallback=0;\r\nconst timeInterval=200;\r\n\r\nexport default function MailValidate(props) {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('...');\r\n    const history = useHistory();\r\n\r\n    // update loading\r\n    let current=new Date().getTime();\r\n    // create only 1 callback at a time\r\n    if (current-createCallback>=timeInterval){\r\n        createCallback=current;\r\n        setTimeout(() => {\r\n            if (loading.length < 3) {\r\n                setLoading(loading + '.');\r\n            } else {\r\n                setLoading('');\r\n            }\r\n        }, timeInterval);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        // get username from url\r\n        let username = (new URL(document.location)).searchParams.get('username');\r\n        // call api for validation\r\n        await api.validate(username);\r\n        // delete all local storages on App\r\n        localStorage.setItem(\"username\", \"\");\r\n        localStorage.setItem(\"loginStatus\", \"false\");\r\n        localStorage.setItem(\"token\", \"\");\r\n        setTimeout(() => history.push('/signin'), 5000);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.notification}>\r\n                <b>Almost done!</b>\r\n                <br />\r\n                Wait for a moment <div className={classes.loading}>{loading}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js",["104"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport api from '../../api/userApi';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function UserProfile() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [user, setUser] = useState({});\r\n\r\n    // const username = (new URL(document.location)).searchParams.get('user');\r\n    // const email = (new URL(document.location)).searchParams.get('email');\r\n    // const token = localStorage.getItem(\"token\");\r\n\r\n    useEffect(()=>{\r\n        const username = (new URL(document.location)).searchParams.get('user');\r\n        \r\n        (async ()=>{\r\n            let response = await api.getUserByUsername(username);\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            setUser(response);\r\n        })();\r\n    },[]);\r\n\r\n    // if (!token) {\r\n    //     history.push('/signin');\r\n    // }\r\n\r\n    function handleSubmit(e) {\r\n        // fetch(`${config.uriPath}/users`, {\r\n        //     method: 'PUT',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //         \"userID\": userID\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         \"name\": nameText,\r\n        //         \"password\": passwordText\r\n        //     })\r\n        // }).then(resp => resp.json())\r\n        //     .then(data => {\r\n        //         console.log(data);\r\n        //         if (data.code === 0) {\r\n        //             history.push('/');\r\n        //             handleEditProfile();\r\n        //             alert(\"Update profile successfully!\");\r\n\r\n        //         } else {\r\n        //             alert('Update failed. Please fill out password fields to update!');\r\n        //         }\r\n\r\n        //         //loadData();\r\n        //         //setOpen(false);\r\n        //     })\r\n\r\n        // e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Profile\r\n                </Typography>\r\n                <form method='PUT' className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"username\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                value={user.username || ''}\r\n                                disabled\r\n                                id=\"username\"\r\n                                label=\"Username\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                value={user.email || ''}\r\n                                disabled\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    {/* <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button> */}\r\n                    {/* <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={handleCancel}\r\n                    >\r\n                        Cancel\r\n                    </Button> */}\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js",["105","106"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nexport default function Google() {\r\n    const history = useHistory();\r\n\r\n    const username = (new URL(document.location)).searchParams.get('user');\r\n    const token = (new URL(document.location)).searchParams.get('token');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"username\", username);\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"loginStatus\", true);\r\n        history.push('/');\r\n    }, []);\r\n\r\n    return (null);\r\n}",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":51,"column":20,"nodeType":"113","messageId":"114","endLine":51,"endColumn":22},{"ruleId":"115","severity":1,"message":"116","line":81,"column":8,"nodeType":"117","endLine":81,"endColumn":10,"suggestions":"118"},{"ruleId":"107","replacedBy":"119"},{"ruleId":"109","replacedBy":"120"},{"ruleId":"115","severity":1,"message":"121","line":43,"column":8,"nodeType":"117","endLine":43,"endColumn":10,"suggestions":"122"},{"ruleId":"111","severity":1,"message":"123","line":58,"column":34,"nodeType":"113","messageId":"114","endLine":58,"endColumn":36},{"ruleId":"124","severity":1,"message":"125","line":6,"column":22,"nodeType":"126","messageId":"127","endLine":6,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":98,"column":25,"nodeType":"130","messageId":"131","endLine":113,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":124,"column":8,"nodeType":"117","endLine":124,"endColumn":10,"suggestions":"132"},{"ruleId":"111","severity":1,"message":"123","line":236,"column":39,"nodeType":"113","messageId":"114","endLine":236,"endColumn":41},{"ruleId":"124","severity":1,"message":"133","line":32,"column":11,"nodeType":"126","messageId":"127","endLine":32,"endColumn":18},{"ruleId":"111","severity":1,"message":"123","line":45,"column":34,"nodeType":"113","messageId":"114","endLine":45,"endColumn":36},{"ruleId":"111","severity":1,"message":"123","line":45,"column":63,"nodeType":"113","messageId":"114","endLine":45,"endColumn":65},{"ruleId":"115","severity":1,"message":"134","line":75,"column":8,"nodeType":"117","endLine":75,"endColumn":10,"suggestions":"135"},{"ruleId":"111","severity":1,"message":"112","line":86,"column":28,"nodeType":"113","messageId":"114","endLine":86,"endColumn":30},{"ruleId":"111","severity":1,"message":"123","line":93,"column":65,"nodeType":"113","messageId":"114","endLine":93,"endColumn":67},{"ruleId":"124","severity":1,"message":"136","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"123","line":14,"column":29,"nodeType":"113","messageId":"114","endLine":14,"endColumn":31},{"ruleId":"111","severity":1,"message":"123","line":36,"column":63,"nodeType":"113","messageId":"114","endLine":36,"endColumn":65},{"ruleId":"111","severity":1,"message":"123","line":36,"column":99,"nodeType":"113","messageId":"114","endLine":36,"endColumn":101},{"ruleId":"111","severity":1,"message":"123","line":74,"column":46,"nodeType":"113","messageId":"114","endLine":74,"endColumn":48},{"ruleId":"124","severity":1,"message":"137","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"136","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"115","severity":1,"message":"138","line":47,"column":15,"nodeType":"139","endLine":57,"endColumn":6},{"ruleId":"115","severity":1,"message":"116","line":57,"column":8,"nodeType":"117","endLine":57,"endColumn":10,"suggestions":"140"},{"ruleId":"115","severity":1,"message":"116","line":53,"column":7,"nodeType":"117","endLine":53,"endColumn":9,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":13},{"ruleId":"115","severity":1,"message":"143","line":15,"column":8,"nodeType":"117","endLine":15,"endColumn":10,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["147"],["145"],["146"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["148"],"Expected '===' and instead saw '=='.","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["149"],"'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardId' and 'history'. Either include them or remove the dependency array.",["150"],"'useEffect' is defined but never used.","'useState' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["151"],["152"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'token', and 'username'. Either include them or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"154","fix":"158"},{"desc":"159","fix":"160"},{"desc":"154","fix":"161"},{"desc":"154","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [history]",{"range":"165","text":"166"},"Update the dependencies array to be: [history, token]",{"range":"167","text":"168"},{"range":"169","text":"166"},"Update the dependencies array to be: [boardId, history]",{"range":"170","text":"171"},{"range":"172","text":"166"},{"range":"173","text":"166"},"Update the dependencies array to be: [history, token, username]",{"range":"174","text":"175"},[2245,2247],"[history]",[1365,1367],"[history, token]",[3914,3916],[2628,2630],"[boardId, history]",[1700,1702],[1801,1803],[526,528],"[history, token, username]"]