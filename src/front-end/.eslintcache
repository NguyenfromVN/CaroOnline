[{"D:\\CaroOnline\\src\\front-end\\src\\index.js":"1","D:\\CaroOnline\\src\\front-end\\src\\webSocketClient.js":"2","D:\\CaroOnline\\src\\front-end\\src\\App.js":"3","D:\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js":"4","D:\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js":"5","D:\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js":"6","D:\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js":"7","D:\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js":"8","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js":"9","D:\\CaroOnline\\src\\front-end\\src\\components\\UpdatePassword\\index.js":"10","D:\\CaroOnline\\src\\front-end\\src\\components\\ForgotPassword\\index.js":"11","D:\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js":"12","D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js":"13","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js":"14","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\gameInfo.js":"15","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js":"16","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\history.js":"17","D:\\CaroOnline\\src\\front-end\\src\\api\\userApi.js":"18","D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\rankingBoard.js":"19","D:\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js":"20","D:\\CaroOnline\\src\\front-end\\src\\components\\SearchedUserList\\index.js":"21"},{"size":256,"mtime":1608290034436,"results":"22","hashOfConfig":"23"},{"size":1375,"mtime":1610564087763,"results":"24","hashOfConfig":"23"},{"size":7915,"mtime":1610566427342,"results":"25","hashOfConfig":"23"},{"size":602,"mtime":1609940073621,"results":"26","hashOfConfig":"23"},{"size":2009,"mtime":1608450297084,"results":"27","hashOfConfig":"23"},{"size":5142,"mtime":1610355748395,"results":"28","hashOfConfig":"23"},{"size":4604,"mtime":1610355748396,"results":"29","hashOfConfig":"23"},{"size":700,"mtime":1610355748370,"results":"30","hashOfConfig":"23"},{"size":7635,"mtime":1610566445328,"results":"31","hashOfConfig":"23"},{"size":3285,"mtime":1610355748408,"results":"32","hashOfConfig":"23"},{"size":2986,"mtime":1610355748383,"results":"33","hashOfConfig":"23"},{"size":4764,"mtime":1610566445329,"results":"34","hashOfConfig":"23"},{"size":17814,"mtime":1610566445425,"results":"35","hashOfConfig":"23"},{"size":364,"mtime":1609944379312,"results":"36","hashOfConfig":"23"},{"size":3745,"mtime":1610566445327,"results":"37","hashOfConfig":"23"},{"size":3078,"mtime":1609164745078,"results":"38","hashOfConfig":"23"},{"size":1991,"mtime":1610195694258,"results":"39","hashOfConfig":"23"},{"size":4409,"mtime":1610566574612,"results":"40","hashOfConfig":"23"},{"size":1530,"mtime":1609940138550,"results":"41","hashOfConfig":"23"},{"size":1023,"mtime":1608282954373,"results":"42","hashOfConfig":"23"},{"size":2652,"mtime":1610566427345,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"112nzf5",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CaroOnline\\src\\front-end\\src\\index.js",[],"D:\\CaroOnline\\src\\front-end\\src\\webSocketClient.js",[],"D:\\CaroOnline\\src\\front-end\\src\\App.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\Google\\index.js",["90","91"],"D:\\CaroOnline\\src\\front-end\\src\\components\\MailValidate\\index.js",["92","93"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Login\\index.js",["94","95"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Register\\index.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\CheckMail\\index.js",["96","97"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\index.js",["98","99","100","101","102","103","104","105","106","107","108","109","110"],"D:\\CaroOnline\\src\\front-end\\src\\components\\UpdatePassword\\index.js",["111"],"D:\\CaroOnline\\src\\front-end\\src\\components\\ForgotPassword\\index.js",["112"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Profile\\index.js",["113","114","115","116"],"import './index.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Avatar, CssBaseline, Typography, Container, Grid, Card, CardActionArea, CardContent, CardActions, Button } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport api from '../../api/userApi';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst boardsList = boards => (\r\n    boards.map((board) => {\r\n        if (board.boardId && board.result) { //kiểm tra boardID rỗng và đã kết thúc\r\n            return (\r\n                <BoardItem key={board.boardId}\r\n                    boardItem={board} />\r\n            );\r\n        }\r\n    })\r\n);\r\n\r\nexport default function UserProfile() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [user, setUser] = useState({});\r\n    const [boards, setBoards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const username = (new URL(document.location)).searchParams.get('user');\r\n\r\n        (async () => {\r\n            let response = await api.getUserByUsername(username);\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            setUser(response);\r\n            setBoards(response.history);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <main>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Profile\r\n                    </Typography>\r\n                    <div className='profile-content'>\r\n                        <div>Username: <b>{user.username}</b></div><br />\r\n                        <div>Email: <b>{user.email}</b></div><br />\r\n                        <div>Games played: <b>{(user.win || 0) + (user.lose || 0)}</b></div><br />\r\n                        <div>Games won: <b>{user.win}</b></div><br />\r\n                        <div>Games lost: <b>{user.lose}</b></div><br />\r\n                        <div>Trophy: <b>{user.trophy}</b></div>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Typography component=\"h1\" variant=\"h5\" style={{ marginBottom: 20, color: \"#aaaaaa\" }}>\r\n                    LIST GAMES PLAYED\r\n                </Typography>\r\n                <Grid container spacing={4}>\r\n                    {boardsList(boards)}\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction BoardItem(props) {\r\n    const classes = useStyles();\r\n    const board = props.boardItem;\r\n    const history = useHistory();\r\n    const result = board.result;\r\n    let boardColor = (result == \"lose\") ? \"rgb(255, 242, 242)\" : (result == \"win\" ? \"rgb(222, 255, 222)\" : \"#ededff\");\r\n\r\n    async function viewGame() {\r\n        history.push(`/board?id=${board.boardId}`);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n                <CardActionArea style={{ flexGrow: 1, backgroundColor: boardColor }}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h4\">\r\n                            {board.boardId}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h5\">\r\n                            Result: <b>{result}</b>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions >\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={viewGame}>\r\n                        VIEW GAME\r\n                </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}",["117","118"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\index.js",["119","120","121","122","123","124","125","126","127"],"import RankingBoard from './rankingBoard';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './index.css';\r\nimport ws from '../../webSocketClient';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport api from '../../api/userApi';\r\nimport {\r\n    Grid, Container, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\r\n    Card, CardActionArea, CardActions, CardContent, Typography, Paper, InputBase, IconButton\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2px 4px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 400,\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    },\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    },\r\n    card: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    cardMedia: {\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    cardContent: {\r\n        flexGrow: 1,\r\n    },\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n}));\r\n\r\nconst boardsList = boards => (\r\n    boards.map((board) => {\r\n        return (\r\n            <BoardItem key={board.boardId}\r\n                boardItem={board} />\r\n        );\r\n    })\r\n);\r\n\r\nconst usersList = (users, isAdmin) => (\r\n    users.map(user => {\r\n        return (\r\n            <UserItem key={user.username} user={user} isAdmin={isAdmin} />\r\n        );\r\n    })\r\n);\r\n\r\nexport default function Home() {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n    const [boards, setBoards] = useState([]);\r\n    const [searchedBoardIdText, setSearchedBoardIdText] = useState('');\r\n    const [rankingBoard, setRankingBoard] = useState([]);\r\n    const history = useHistory();\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // call API and get boards\r\n            let response = await api.getAllBoards();\r\n            if (response.message) {\r\n                history.push('/signin');\r\n                return;\r\n            }\r\n            // set boards list\r\n            setBoards(response);\r\n            // set isAdmin\r\n            setIsAdmin(localStorage.getItem('username') == 'Admin');\r\n            // init web socket client\r\n            const username = localStorage.getItem('username');\r\n            const privateTopic = `private-${username}`;\r\n            ws.createConnection(username, async (topicName, msg) => {\r\n                let callbacks = {\r\n                    usersList: async () => {\r\n                        let arr = await api.getUsers();\r\n                        setUsers(arr);\r\n                    },\r\n                    boardsList: async () => {\r\n                        let arr = await api.getAllBoards();\r\n                        setBoards(arr);\r\n                    },\r\n                };\r\n                callbacks[privateTopic] = async () => {\r\n                    if (msg.split('-')[0] == 'invite') {\r\n                        // recieve invitation\r\n                        const boardId = msg.split('-')[1];\r\n                        const accepted = window.confirm(`You are invited to board ${boardId}. Accept it?`);\r\n                        const invitedBoard = await api.getBoard(boardId);\r\n                        if (accepted) {\r\n                            // join game and redirect to board screen\r\n                            await api.joinBoard(boardId);\r\n                            history.push(`/board?id=${boardId}`);\r\n                            ws.notifyChange(`private-${invitedBoard.userId1}`, `invitation-User ${username} accepted your invitation!`);\r\n                        } else {\r\n                            ws.notifyChange(`private-${invitedBoard.userId1}`, `invitation-User ${username} refused your invitation!`);\r\n                        }\r\n                    } else {\r\n                        // invitation response                      \r\n                        alert(msg.split('-')[1]);\r\n                    }\r\n                };\r\n                if (callbacks[topicName]) {\r\n                    callbacks[topicName]();\r\n                }\r\n            });\r\n            ws.subscribeTopic('boardsList');\r\n            ws.subscribeTopic('usersList');\r\n            // get users list\r\n            let arr = await api.getUsers();\r\n            setUsers(arr);\r\n            // get ranking board\r\n            const rankingBoard = await api.getRankingBoard();\r\n            setRankingBoard(rankingBoard);\r\n        })();\r\n    }, []);\r\n\r\n    const handleJoinGameById = async () => {\r\n        const boardId = searchedBoardIdText;\r\n        const boardResponse = await api.getBoard(boardId);\r\n        if (boardResponse._id) {\r\n            const username = localStorage.getItem(\"username\");\r\n            if (username == boardResponse.userId1) {\r\n                alert('You are already the owner of this game!');\r\n                history.push(`/board?id=${boardId}`);\r\n            } else {\r\n                if (!boardResponse.userId2) {\r\n                    await api.joinBoard(boardId);\r\n                    history.push(`/board?id=${boardId}`);\r\n                    alert(\"You have successfully joined the game as the second player. Play your best!\");\r\n                } else {\r\n                    history.push(`/board?id=${boardId}`);\r\n                    if (boardResponse.userId2 == username) {\r\n                        alert(\"You already joined this game as a player!\");\r\n                    } else {\r\n                        alert(\"This game is full. You have joined the game as a spectator. Enjoy the match!\");\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            alert(\"There is no game to match your search. Please try again!\");\r\n        }\r\n    }\r\n\r\n    async function handleFindUsersByUsernameOrEmail() {\r\n        // TODO\r\n    }\r\n\r\n    function topLeftTextbox() {\r\n        if (isAdmin)\r\n            return (\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} sm={4} md={4}>\r\n                            <Paper variant=\"outlined\" style={{ display: 'flex' }}>\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"Find users by username/email\"\r\n                                    inputProps={{ 'aria-label': 'Find users by username/email' }}\r\n                                    onChange={(e) => {\r\n                                        setSearchedBoardIdText(e.target.value)\r\n                                    }}\r\n                                />\r\n                                <IconButton onClick={handleFindUsersByUsernameOrEmail} className={classes.iconButton} aria-label=\"Find\">\r\n                                    <ArrowForwardIcon />\r\n                                </IconButton>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            );\r\n        return (\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={4}>\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Paper variant=\"outlined\" style={{ display: 'flex' }}>\r\n                            <InputBase\r\n                                className={classes.input}\r\n                                placeholder=\"Join game by id/key\"\r\n                                inputProps={{ 'aria-label': 'join game by key' }}\r\n                                onChange={(e) => {\r\n                                    setSearchedBoardIdText(e.target.value)\r\n                                }}\r\n                            />\r\n                            <IconButton onClick={handleJoinGameById} className={classes.iconButton} aria-label=\"join\">\r\n                                <ArrowForwardIcon />\r\n                            </IconButton>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <AddBoardDialog callback={setBoards} />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"home-container\">\r\n                <div>\r\n                    {topLeftTextbox()}\r\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                        <Grid container spacing={4}>\r\n                            {boardsList(boards)}\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n                <div className=\"right-panel\">\r\n                    <div className='right-panel-container'>\r\n                        <div className='users-list'>\r\n                            {usersList(users, isAdmin)}\r\n                        </div>\r\n                        <RankingBoard rankingBoard={rankingBoard} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction BoardItem(props) {\r\n    const classes = useStyles();\r\n    const board = props.boardItem;\r\n    const history = useHistory();\r\n    let boardColor = (board.winner) ? '#ebebeb' : (board.userId2) ? \"#deffde\" : \"#ededff\";\r\n    let boardStatusText = (board.winner) ? \"Finished\" : (board.userId2) ? \"Playing\" : \"Waiting\";\r\n\r\n    async function viewGame() {\r\n        history.push(`/board?id=${board.boardId}`);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Card variant=\"outlined\" className={classes.card}>\r\n                <CardActionArea style={{ flexGrow: 1, backgroundColor: boardColor }}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {board.boardId}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Owner: <b>{board.userId1}</b>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Other: <b>{board.userId2}</b>\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\r\n                            Status: <b>{boardStatusText}</b>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                {/* </Link> */}\r\n                <CardActions >\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={viewGame}>\r\n                        VIEW GAME\r\n                </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction UserItem(props) {\r\n    const user = props.user;\r\n    const history = useHistory();\r\n    const [boardName, setBoardName] = useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const username = localStorage.getItem(\"username\");\r\n\r\n    let statusColor = (user.isActive ? \"#29ba29\" : \"#d9d9d9\");\r\n\r\n    const handleClickOpen = (e) => {\r\n        e.stopPropagation();\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (e) => {\r\n        setOpen(false);\r\n        setBoardName('');\r\n    };\r\n\r\n    const handleInvite = async (e) => {\r\n        const board = await api.getBoard(boardName);\r\n        if (board.boardId && username == board.userId1 && !board.userId2 && !board.winner) {\r\n            ws.notifyChange(`private-${user.username}`, `invite-${boardName}`);\r\n        } else {\r\n            alert(\"Can not invite. Check your board name again!\");\r\n        }\r\n        handleClose(e);\r\n    }\r\n\r\n    function handleBlockUser(e) {\r\n        // TODO\r\n        e.stopPropagation();\r\n    }\r\n\r\n    function userItemActionButton() {\r\n        const isAdmin = props.isAdmin;\r\n        if (isAdmin) {\r\n            return (\r\n                <button\r\n                    style={{\r\n                        width: \"4rem\",\r\n                        margin: \"5px\",\r\n                        cursor: \"pointer\"\r\n                    }}\r\n                    onClick={handleBlockUser}\r\n                >Block</button>\r\n            );\r\n        }\r\n        return (\r\n            <button\r\n                style={{\r\n                    width: \"4rem\",\r\n                    margin: \"5px\",\r\n                    ...(user.username == localStorage.getItem('username') ? { display: \"none\" } : {}),\r\n                    cursor: \"pointer\"\r\n                }}\r\n                disabled={!user.isActive}\r\n                onClick={handleClickOpen}\r\n            >Invite</button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Invite player {user.username}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Input a board name that is yours and currently empty\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={e => {\r\n                            setBoardName(e.target.value);\r\n                        }}\r\n                    />\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={handleInvite}>\r\n                            Invite\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n            <div\r\n                className=\"user-item\"\r\n                onClick={() => {\r\n                    history.push(`/detail?user=${user.username}`);\r\n                }}\r\n            >\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}><FiberManualRecordIcon style={{ color: statusColor }} /></div>\r\n                <div style={{ marginLeft: \"5px\", display: \"flex\", alignItems: \"center\" }}>{user.username}</div>\r\n                <div style={{ flexGrow: 1 }}></div>\r\n                {userItemActionButton()}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction AddBoardDialog(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [nameText, setNameText] = React.useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setNameText('');\r\n    };\r\n\r\n    const handleNameChange = (e) => {\r\n        setNameText(e.target.value);\r\n    };\r\n\r\n    async function createNewBoard(e) {\r\n        handleClose();\r\n        const response = await api.createBoard(nameText, nameText);\r\n        if (response != 'Success') {\r\n            alert(response);\r\n            return;\r\n        }\r\n        ws.notifyChange('boardsList');\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: 'absolute' }}>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Create game\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Create game</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        To create a new game, please fill out board's name in the box.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={handleNameChange}\r\n                    />\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                            </Button>\r\n                        <Button type=\"submit\" color=\"primary\" onClick={createNewBoard}>\r\n                            Create\r\n                            </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\square.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\gameInfo.js",["128","129","130","131","132","133","134","135"],"import React, { useEffect, useState } from 'react';\r\nimport ws from '../../webSocketClient';\r\nimport { Button } from '@material-ui/core';\r\nimport api from '../../api/userApi';\r\n\r\nconst time = 21000; // time for each turn, 21 seconds\r\n\r\nfunction getTimer(countdown) {\r\n    if (countdown >= 10) {\r\n        return `${countdown} s`;\r\n    }\r\n    if (countdown > 0) {\r\n        return `0${countdown} s`;\r\n    }\r\n    return countdown;\r\n}\r\n\r\nfunction Countdown(props) {\r\n    const [countdown, setCountdown] = useState('---');\r\n    const [intervalId, setIntervalId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // clear interval\r\n        clearInterval(intervalId);\r\n        // update countdown\r\n        if (props.board.boardId) {\r\n            if (props.board.winner) {\r\n                setCountdown('Finished');\r\n            } else if (props.board.lastTurn) {\r\n                let id = setInterval(() => {\r\n                    const newCountdown = ((time - (new Date().getTime() - props.board.lastTurn)) / 1000).toFixed(0);\r\n                    if (newCountdown == 0) {\r\n                        // out of time\r\n                        (async () => {\r\n                            const username = localStorage.getItem(\"username\");\r\n                            if (props.isPlayer && props.board.nextTurn != username) {\r\n                                await api.forceWin(props.board.boardId);\r\n                                ws.notifyChange(`${props.board.boardId}-board`, `Out of time! ${props.board.nextTurn} lost!`);\r\n                            }\r\n                        })();\r\n                        // clear interval\r\n                        clearInterval(intervalId);\r\n                        setCountdown('Time is over!');\r\n                    } else {\r\n                        setCountdown(newCountdown);\r\n                    }\r\n                }, 1000);\r\n                setIntervalId(id);\r\n            } else {\r\n                setCountdown('Not start yet!');\r\n            }\r\n        }\r\n\r\n        return (()=>clearInterval(intervalId));\r\n    }, [props.board]);\r\n\r\n    return (<div>{getTimer(countdown)}</div>);\r\n}\r\n\r\nconst GameInfo = (props) => {\r\n    const username = localStorage.getItem(\"username\");\r\n    const boardId = props.board.boardId;\r\n    const isPlayer = (username == props.board.userId1 || username == props.board.userId2);\r\n    const winnerText = (props.board.winner ? props.board.winner : \"not yet\");\r\n    const nextTurnChar = (props.board.nextTurn == props.board.userId1 ? 'X' : 'O');\r\n    const nextTurnText = (isPlayer ? (username == props.board.nextTurn ? `you (${nextTurnChar})` : `opponent (${nextTurnChar})`) : `${props.board.nextTurn} (${nextTurnChar})`);\r\n\r\n    const handleSurrender = async () => {\r\n        const res = await api.surrender(boardId);\r\n        ws.notifyChange(`${props.board.boardId}-board`, `${username} surrendered!`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-info-frame\">\r\n            <div>Winner: {winnerText}</div>\r\n            <div>Next turn: {props.board.winner ? '---' : nextTurnText}</div>\r\n            <Button variant=\"outlined\" color=\"primary\" style={{ margin: \"5px 5px\" }} disabled={!isPlayer || !!props.board.winner}>\r\n                Draw request\r\n            </Button>\r\n            <Button onClick={handleSurrender} variant=\"outlined\" color=\"secondary\" style={{ margin: \"5px 5px\" }} disabled={!isPlayer || !!props.board.winner}>\r\n                Surrender\r\n            </Button>\r\n            <Countdown board={props.board} isPlayer={isPlayer} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameInfo;","D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\chat.js",["136","137","138","139","140"],"D:\\CaroOnline\\src\\front-end\\src\\components\\Board\\history.js",["141","142","143","144","145"],"D:\\CaroOnline\\src\\front-end\\src\\api\\userApi.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\Home\\rankingBoard.js",["146","147"],"D:\\CaroOnline\\src\\front-end\\src\\api\\axiosClient.js",[],"D:\\CaroOnline\\src\\front-end\\src\\components\\SearchedUserList\\index.js",[],{"ruleId":"148","severity":1,"message":"149","line":1,"column":8,"nodeType":"150","messageId":"151","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"153","line":16,"column":8,"nodeType":"154","endLine":16,"endColumn":10,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":47,"column":15,"nodeType":"157","endLine":57,"endColumn":6},{"ruleId":"152","severity":1,"message":"158","line":57,"column":8,"nodeType":"154","endLine":57,"endColumn":10,"suggestions":"159"},{"ruleId":"152","severity":1,"message":"160","line":43,"column":8,"nodeType":"154","endLine":43,"endColumn":10,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":58,"column":34,"nodeType":"164","messageId":"165","endLine":58,"endColumn":36},{"ruleId":"148","severity":1,"message":"166","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"167","line":1,"column":27,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"168","line":12,"column":7,"nodeType":"150","messageId":"151","endLine":12,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":61,"column":31,"nodeType":"164","messageId":"165","endLine":61,"endColumn":33},{"ruleId":"162","severity":1,"message":"169","line":61,"column":49,"nodeType":"164","messageId":"165","endLine":61,"endColumn":51},{"ruleId":"162","severity":1,"message":"169","line":65,"column":42,"nodeType":"164","messageId":"165","endLine":65,"endColumn":44},{"ruleId":"162","severity":1,"message":"169","line":83,"column":39,"nodeType":"164","messageId":"165","endLine":83,"endColumn":41},{"ruleId":"162","severity":1,"message":"163","line":96,"column":40,"nodeType":"164","messageId":"165","endLine":96,"endColumn":42},{"ruleId":"162","severity":1,"message":"163","line":96,"column":69,"nodeType":"164","messageId":"165","endLine":96,"endColumn":71},{"ruleId":"152","severity":1,"message":"170","line":105,"column":8,"nodeType":"154","endLine":105,"endColumn":10,"suggestions":"171"},{"ruleId":"162","severity":1,"message":"169","line":124,"column":28,"nodeType":"164","messageId":"165","endLine":124,"endColumn":30},{"ruleId":"162","severity":1,"message":"163","line":131,"column":65,"nodeType":"164","messageId":"165","endLine":131,"endColumn":67},{"ruleId":"162","severity":1,"message":"163","line":142,"column":38,"nodeType":"164","messageId":"165","endLine":142,"endColumn":40},{"ruleId":"162","severity":1,"message":"163","line":142,"column":69,"nodeType":"164","messageId":"165","endLine":142,"endColumn":71},{"ruleId":"162","severity":1,"message":"163","line":159,"column":41,"nodeType":"164","messageId":"165","endLine":159,"endColumn":43},{"ruleId":"162","severity":1,"message":"163","line":38,"column":30,"nodeType":"164","messageId":"165","endLine":38,"endColumn":32},{"ruleId":"162","severity":1,"message":"163","line":37,"column":30,"nodeType":"164","messageId":"165","endLine":37,"endColumn":32},{"ruleId":"172","severity":1,"message":"173","line":35,"column":24,"nodeType":"157","messageId":"174","endLine":35,"endColumn":26},{"ruleId":"152","severity":1,"message":"158","line":63,"column":8,"nodeType":"154","endLine":63,"endColumn":10,"suggestions":"175"},{"ruleId":"162","severity":1,"message":"163","line":104,"column":30,"nodeType":"164","messageId":"165","endLine":104,"endColumn":32},{"ruleId":"162","severity":1,"message":"163","line":104,"column":74,"nodeType":"164","messageId":"165","endLine":104,"endColumn":76},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"148","severity":1,"message":"180","line":7,"column":22,"nodeType":"150","messageId":"151","endLine":7,"endColumn":26},{"ruleId":"162","severity":1,"message":"163","line":97,"column":57,"nodeType":"164","messageId":"165","endLine":97,"endColumn":59},{"ruleId":"162","severity":1,"message":"163","line":113,"column":43,"nodeType":"164","messageId":"165","endLine":113,"endColumn":45},{"ruleId":"152","severity":1,"message":"158","line":143,"column":8,"nodeType":"154","endLine":143,"endColumn":10,"suggestions":"181"},{"ruleId":"162","severity":1,"message":"163","line":150,"column":26,"nodeType":"164","messageId":"165","endLine":150,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":160,"column":47,"nodeType":"164","messageId":"165","endLine":160,"endColumn":49},{"ruleId":"162","severity":1,"message":"163","line":313,"column":39,"nodeType":"164","messageId":"165","endLine":313,"endColumn":41},{"ruleId":"162","severity":1,"message":"163","line":345,"column":39,"nodeType":"164","messageId":"165","endLine":345,"endColumn":41},{"ruleId":"162","severity":1,"message":"169","line":418,"column":22,"nodeType":"164","messageId":"165","endLine":418,"endColumn":24},{"ruleId":"162","severity":1,"message":"163","line":32,"column":38,"nodeType":"164","messageId":"165","endLine":32,"endColumn":40},{"ruleId":"162","severity":1,"message":"169","line":36,"column":72,"nodeType":"164","messageId":"165","endLine":36,"endColumn":74},{"ruleId":"152","severity":1,"message":"182","line":55,"column":8,"nodeType":"154","endLine":55,"endColumn":21,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"163","line":63,"column":32,"nodeType":"164","messageId":"165","endLine":63,"endColumn":34},{"ruleId":"162","severity":1,"message":"163","line":63,"column":67,"nodeType":"164","messageId":"165","endLine":63,"endColumn":69},{"ruleId":"162","severity":1,"message":"163","line":65,"column":48,"nodeType":"164","messageId":"165","endLine":65,"endColumn":50},{"ruleId":"162","severity":1,"message":"163","line":66,"column":48,"nodeType":"164","messageId":"165","endLine":66,"endColumn":50},{"ruleId":"148","severity":1,"message":"184","line":69,"column":15,"nodeType":"150","messageId":"151","endLine":69,"endColumn":18},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"162","severity":1,"message":"163","line":14,"column":29,"nodeType":"164","messageId":"165","endLine":14,"endColumn":31},{"ruleId":"162","severity":1,"message":"163","line":36,"column":63,"nodeType":"164","messageId":"165","endLine":36,"endColumn":65},{"ruleId":"162","severity":1,"message":"163","line":36,"column":99,"nodeType":"164","messageId":"165","endLine":36,"endColumn":101},{"ruleId":"162","severity":1,"message":"163","line":74,"column":46,"nodeType":"164","messageId":"165","endLine":74,"endColumn":48},{"ruleId":"162","severity":1,"message":"163","line":18,"column":19,"nodeType":"164","messageId":"165","endLine":18,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":20,"column":69,"nodeType":"164","messageId":"165","endLine":20,"endColumn":71},{"ruleId":"162","severity":1,"message":"163","line":24,"column":55,"nodeType":"164","messageId":"165","endLine":24,"endColumn":57},{"ruleId":"162","severity":1,"message":"163","line":33,"column":69,"nodeType":"164","messageId":"165","endLine":33,"endColumn":71},{"ruleId":"162","severity":1,"message":"163","line":37,"column":55,"nodeType":"164","messageId":"165","endLine":37,"endColumn":57},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"166","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'props', 'token', and 'username'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["185"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["187"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useEffect' is defined but never used.","'useStyles' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'boardId' and 'history'. Either include them or remove the dependency array.",["188"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["189"],"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"'Link' is defined but never used.",["192"],"React Hook useEffect has missing dependencies: 'intervalId' and 'props.isPlayer'. Either include them or remove the dependency array.",["193"],"'res' is assigned a value but never used.",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"196","fix":"202"},"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [history, props, token, username]",{"range":"206","text":"207"},"Update the dependencies array to be: [history]",{"range":"208","text":"209"},"Update the dependencies array to be: [history, token]",{"range":"210","text":"211"},"Update the dependencies array to be: [boardId, history]",{"range":"212","text":"213"},{"range":"214","text":"209"},{"range":"215","text":"209"},"Update the dependencies array to be: [intervalId, props.board, props.isPlayer]",{"range":"216","text":"217"},[573,575],"[history, props, token, username]",[1700,1702],"[history]",[1377,1379],"[history, token]",[4305,4307],"[boardId, history]",[1920,1922],[5111,5113],[2054,2067],"[intervalId, props.board, props.isPlayer]"]